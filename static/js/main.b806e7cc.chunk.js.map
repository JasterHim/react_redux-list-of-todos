{"version":3,"sources":["components/TodoFilter/TodoFilter.tsx","features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["Status","actions","todo","type","payload","currentTodoReducer","state","action","query","status","initialState","filterReducer","todos","todosReducer","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoList","selectedTodo","dispatch","preparedTodos","task","todosCopy","normalize","trim","toLowerCase","title","includes","completed","prepareTodos","className","map","classNames","id","onClick","TodoFilter","onChange","event","target","value","ALL","ACTIVE","COMPLETED","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","useState","user","setUser","isLoading","setIsLoading","useEffect","userId","client","finally","href","email","name","App","todosFromServer","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b806e7cc.chunk.js","sourcesContent":["import React from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions } from '../../features/filter';\n\nenum Status {\n  ALL = 'all',\n  ACTIVE = 'active',\n  COMPLETED = 'completed',\n}\n\nexport const TodoFilter: React.FC = () => {\n  const filter = useAppSelector(state => state.filter);\n  const dispatch = useAppDispatch();\n\n  const handleInput = (event: React.ChangeEvent<HTMLInputElement>) => {\n    dispatch(actions.setQuery(event.target.value));\n  };\n\n  const handleFilterStatus = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    return dispatch(actions.setStatus(event.target.value as Status));\n  };\n\n  const handleReset = () => dispatch(actions.removeQuery());\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            onChange={handleFilterStatus}\n          >\n            <option value={Status.ALL}>All</option>\n            <option value={Status.ACTIVE}>Active</option>\n            <option value={Status.COMPLETED}>Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={filter.query}\n          onChange={handleInput}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {filter.query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            <button\n              aria-label=\"clearSearchButton\"\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={handleReset}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import { Todo } from '../types/Todo';\n\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n\n    case 'currentTodo/REMOVE':\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Filter } from '../types/Filter';\nimport { Status } from '../types/Status';\n\ntype RemoveQueryAction = { type: 'filter/REMOVE_QUERY' };\n\ntype SetQuery = {\n  type: 'filter/SET_QUERY';\n  payload: string;\n};\n\ntype SetStatus = {\n  type: 'filter/SET_STATUS';\n  payload: Status;\n};\n\ntype Action = RemoveQueryAction | SetQuery | SetStatus;\n\nconst removeQuery = (): RemoveQueryAction => ({ type: 'filter/REMOVE_QUERY' });\n\nconst setQuery = (query: string): SetQuery => ({\n  type: 'filter/SET_QUERY',\n  payload: query,\n});\n\nconst setStatus = (status: Status): SetStatus => ({\n  type: 'filter/SET_STATUS',\n  payload: status,\n});\n\nexport const actions = { removeQuery, setQuery, setStatus };\n\nconst initialState: Filter = {\n  query: '',\n  status: 'all',\n};\n\nconst filterReducer = (\n  state: Filter = initialState,\n  action: Action,\n): Filter => {\n  switch (action.type) {\n    case 'filter/REMOVE_QUERY':\n      return { ...state, query: '' };\n\n    case 'filter/SET_QUERY':\n      return { ...state, query: action.payload };\n\n    case 'filter/SET_STATUS':\n      return { ...state, status: action.payload };\n\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype SetTodos = {\n  type: 'todo/SET';\n  payload: Todo[];\n};\n\nconst setTodos = (todos: Todo[]): SetTodos => ({\n  type: 'todo/SET',\n  payload: todos,\n});\n\nexport const actions = { setTodos };\n\ntype Action = SetTodos;\n\nconst todosReducer = (todos: Todo[] = [], action: Action): Todo[] => {\n  switch (action.type) {\n    case 'todo/SET':\n      return [...action.payload];\n\n    default:\n      return todos;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { Filter } from '../../types/Filter';\nimport { actions } from '../../features/currentTodo';\n\ntype Props = {\n  todos: Todo[],\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  const selectedTodo = useAppSelector(state => state.currentTodo);\n  const filter = useAppSelector(state => state.filter);\n  const dispatch = useAppDispatch();\n\n  const prepareTodos = (task: Todo[], { query, status }: Filter) => {\n    let todosCopy = [...task];\n\n    if (query) {\n      const normalize = query.trim().toLowerCase();\n\n      todosCopy = todosCopy\n        .filter(todo => (todo.title).trim().toLowerCase().includes(normalize));\n    }\n\n    if (status !== 'all') {\n      todosCopy = todosCopy.filter(todo => {\n        switch (status) {\n          case 'active':\n            return !todo.completed;\n\n          case 'completed':\n            return todo.completed;\n\n          default:\n            return todo;\n        }\n      });\n    }\n\n    return todosCopy;\n  };\n\n  const preparedTodos = prepareTodos(todos, filter);\n\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {preparedTodos.map((todo) => (\n          <tr\n            data-cy=\"todo\"\n            key={todo.id}\n            className={classNames({\n              'has-background-info-light': selectedTodo?.id === todo.id,\n            })}\n          >\n            <td className=\"is-vcentered\">{todo.id}</td>\n            <td className=\"is-vcentered\">\n              {todo.completed && (\n                <span className=\"icon\" data-cy=\"iconCompleted\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              )}\n            </td>\n            <td className=\"is-vcentered is-expanded\">\n              <p className={classNames({\n                'has-text-danger': !todo.completed,\n                'has-text-success': todo.completed,\n              })}\n              >\n                {todo.title}\n              </p>\n            </td>\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                data-cy=\"selectButton\"\n                className=\"button\"\n                type=\"button\"\n                onClick={() => dispatch(actions.setTodo(todo))}\n              >\n                <span className=\"icon\">\n                  <i className={classNames('far', {\n                    'fa-eye': todo.id !== selectedTodo?.id,\n                    'fa-eye-slash': todo.id === selectedTodo?.id,\n                  })}\n                  />\n                </span>\n              </button>\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { User } from '../../types/User';\nimport { getUser } from '../../api';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions } from '../../features/currentTodo';\n\nexport const TodoModal: React.FC = () => {\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  const todo = useAppSelector(state => state.currentTodo);\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    if (todo) {\n      getUser(todo.userId)\n        .then((client) => setUser(client))\n        .finally(() => setIsLoading(false));\n    }\n  }, [todo?.id]);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isLoading ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${todo?.id}`}\n            </div>\n\n            <button\n              aria-label=\"buttonDelete\"\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => dispatch(actions.removeTodo())}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {todo?.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n\n              {todo?.completed ? (\n                <strong className=\"has-text-success\">Done</strong>\n              ) : (\n                <strong className=\"has-text-danger\">Planned</strong>\n              )}\n\n              {' by '}\n\n              <a href={`mailto:${user?.email}`}>\n                {user?.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { actions } from './features/todos';\n\nexport const App: React.FC = () => {\n  const [isLoading, setIsLoading] = useState(true);\n\n  const todos = useAppSelector(state => state.todos);\n  const selectedTodo = useAppSelector(state => state.currentTodo);\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    getTodos()\n      .then((todosFromServer) => dispatch(actions.setTodos(todosFromServer)))\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {isLoading ? (\n                <Loader />\n              ) : (\n                <TodoList\n                  todos={todos}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && (\n        <TodoModal />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}